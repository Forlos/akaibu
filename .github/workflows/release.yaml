on:
  push:
    tags:
      - "*"

name: Release

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install required libraries
        run: |
          sudo apt-get install libxkbcommon-dev
      - name: Build Rust release
        uses: actions-rs/cargo@v1
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
        with:
          command: build
          args: --release
      - name: Stash the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: akaibu-linux
          path: |
            ./target/release/akaibu_cli
            ./target/release/akaibu_gui

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build Rust release
        uses: actions-rs/cargo@v1
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
        with:
          command: build
          args: --release
      - name: Stash the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: akaibu-windows
          path: |
            ./target/release/akaibu_cli.exe
            ./target/release/akaibu_gui.exe

  build-macos:
    name: Build on Mac OS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build Rust release
        uses: actions-rs/cargo@v1
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
        with:
          command: build
          args: --release
      - name: Stash the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: akaibu-macos
          path: |
            ./target/release/akaibu_cli
            ./target/release/akaibu_gui

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create release body
        run: |
          git log --oneline $(git describe --tags --abbrev=0 @^)..@ --oneline | tail -n +2 | head -n -1 > body.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: body.md

      - name: Copy release URL into file
        run: |
          mkdir release
          printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt

      - name: Stash file containing the release URL as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-url
          path: ./release

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, create-release]
    strategy:
      matrix:
        version: ["linux", "windows", "mac-os"]
        include:
          - version: linux
            OS: linux
            cli_executable: akaibu_cli
            gui_executable: akaibu_gui
          - version: windows
            OS: windows
            cli_executable: akaibu_cli.exe
            gui_executable: akaibu_gui.exe
          - version: mac-os
            OS: macos
            cli_executable: akaibu_cli
            gui_executable: akaibu_gui
    steps:
      - name: Retrieve stashed intermediary build artifact
        uses: actions/download-artifact@v1
        with:
          name: akaibu-${{ matrix.OS }}

      - name: Prepare release artifacts
        run: |
          mv ./akaibu-${{ matrix.OS }}/* .

          strip ./${{ matrix.cli_executable }} || echo "strip not supported"
          zip -j akaibu_cli-${{ matrix.OS }}.zip ./${{ matrix.cli_executable }}

          strip ./${{ matrix.gui_executable }} || echo "strip not supported"
          zip -j akaibu_gui-${{ matrix.OS }}.zip ./${{ matrix.gui_executable }}

      - name: Retrieve stashed release URL
        uses: actions/download-artifact@v1
        with:
          name: release-url
      - name: Read release URL
        id: get_release_url
        run: echo ::set-output name=URL::$(cat release-url/url.txt)

      - name: Upload cli executable
        id: upload-cli-executable
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.URL }}
          asset_path: ./akaibu_cli-${{ matrix.OS }}.zip
          asset_name: akaibu_cli-${{ matrix.OS }}.zip
          asset_content_type: application/gzip

      - name: Upload gui executable
        id: upload-gui-executable
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.URL }}
          asset_path: ./akaibu_gui-${{ matrix.OS }}.zip
          asset_name: akaibu_gui-${{ matrix.OS }}.zip
          asset_content_type: application/gzip
